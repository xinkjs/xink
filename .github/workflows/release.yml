name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      # statuses: read # Keep if using github changelog, remove if git changelog works
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true # Good to keep for release notes step

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.10 # Pinned version

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # --- Use the standard action again ---
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # *** CHANGE THIS LINE ***
          # Tell the action to run 'changeset publish' after the release PR is merged
          # Use 'bun run' to execute the script defined in package.json
          publish: bun run release
          commit: "chore: update versions and changelogs for release"
          title: "Upcoming Release Changes"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Optional: Create GitHub Releases ---
      - name: Create GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating releases for published packages..."
          published_packages_json='${{ steps.changesets.outputs.publishedPackages }}'
          echo "Published packages JSON: $published_packages_json"

          # Ensure jq is available (might need 'sudo apt-get update && sudo apt-get install -y jq')
          if ! command -v jq &> /dev/null; then
              echo "jq could not be found, installing..."
              sudo apt-get update && sudo apt-get install -y jq
          fi

          tags=$(echo "$published_packages_json" | jq -r '.[] | "\(.name)@\(.version)"')

          if [ -z "$tags" ]; then
            echo "No published packages found in output."
            exit 0
          fi

          echo "Tags to create releases for: $tags"
          for tag in $tags; do
            echo "Creating GitHub release for tag $tag"
            gh release create "$tag" --notes "Automatic release for $tag" || echo "Failed to create release for $tag (maybe it already exists?)"
          done
