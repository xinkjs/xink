name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write # Keep for potential future use or other actions
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.10

      # --- MOVED INSTALL STEP HERE ---
      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # --- Step 1: Check for Changesets ---
      - name: Check for changesets
        id: changesets_check
        run: |
          if ls .changeset/*.md > /dev/null 2>&1; then
            echo "Changesets found."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No changesets found. Skipping release process."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # --- Step 2: Version Packages (if changesets exist) ---
      - name: Run changeset version
        if: steps.changesets_check.outputs.exists == 'true'
        # Use the script defined in package.json which points to ./node_modules/.bin/changeset
        run: bun run changeset version --verbose

      # --- Step 3: DEBUG - Check package.json files ---
      - name: Show package.json after versioning (Debug)
        if: steps.changesets_check.outputs.exists == 'true'
        run: |
          echo "--- packages/xink/package.json ---"
          cat packages/xink/package.json || echo "File not found"
          echo "--- packages/adapter-bun/package.json ---"
          cat packages/adapter-bun/package.json || echo "File not found"
          echo "--- packages/adapter-cloudflare/package.json ---"
          cat packages/adapter-cloudflare/package.json || echo "File not found"
          echo "--- packages/adapter-deno/package.json ---"
          cat packages/adapter-deno/package.json || echo "File not found"
          # Add any other packages whose dependencies you need to check

      # --- Step 4: Commit and Push Versioning Changes (if changesets existed) ---
      - name: Commit and Push Versioning Changes
        if: steps.changesets_check.outputs.exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Configuring git user..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo "Staging changes..."
          git add .

          if ! git diff --staged --quiet; then
            echo "Committing version changes..."
            git commit -m "chore: update versions and changelogs for release [skip ci]"
            echo "Pushing commit to main..."
            git push origin main
            echo "Pushing tags..."
            git push origin --tags
          else
            echo "No versioning changes detected to commit."
          fi

      # --- Step 5: Publish Packages (if changesets existed) ---
      - name: Publish packages
        if: steps.changesets_check.outputs.exists == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # May be needed by build/publish steps
        run: bun run release # Runs build and filtered bun publish

      # --- REMOVED REDUNDANT changesets/action@v1 STEP ---

      # --- Step 6: Create GitHub Releases (if changesets existed) ---
      - name: Create GitHub Releases
        if: steps.changesets_check.outputs.exists == 'true' # Run if versioning happened
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating releases for tags pointing to HEAD..."
          # Give tags a moment to propagate after push
          sleep 5
          git fetch origin --tags
          tags_at_head=$(git tag --points-at HEAD)

          if [ -z "$tags_at_head" ]; then
            echo "No tags found at HEAD to create releases for."
            exit 0 # Exit cleanly
          fi

          echo "Tags found at HEAD: $tags_at_head"
          for tag in $tags_at_head; do
            echo "Creating GitHub release for tag $tag"
            gh release create "$tag" --notes "Automatic release for $tag" || echo "Failed to create release for $tag (maybe it already exists?)"
          done
