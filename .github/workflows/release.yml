name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        # Fetch all history to allow correct version calculation
        with:
          fetch-depth: 0
          fetch-tags: true
    
      - name: Check for changesets
        id: changesets_check
        run: |
          if ls .changeset/*.md > /dev/null 2>&1; then
            echo "Changesets found."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No changesets found. Skipping versioning and publishing based on changesets."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run changeset version (using bunx)
        if: steps.changesets_check.outputs.exists == 'true'
        run: bunx changeset version --verbose # Run via bunx
  
      - name: Show package.json after versioning (Debug)
        if: steps.changesets_check.outputs.exists == 'true'
        run: |
          echo "--- packages/xink/package.json ---"
          cat packages/xink/package.json || echo "File not found"
          echo "--- packages/adapter-bun/package.json ---"
          cat packages/adapter-bun/package.json || echo "File not found"
          echo "--- packages/adapter-cloudflare/package.json ---"
          cat packages/adapter-cloudflare/package.json || echo "File not found"
          echo "--- packages/adapter-deno/package.json ---"
          cat packages/adapter-deno/package.json || echo "File not found"
          # Add any other packages whose dependencies you need to check

      - name: Commit and Push Versioning Changes
        if: steps.changesets_check.outputs.exists == 'true'
        env:
          # GITHUB_TOKEN is needed for authentication to push
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Configuring git user..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo "Staging changes..."
          # Add all changes (version bumps, changelogs, deleted changesets)
          git add .

          # Check if there are staged changes before committing
          if ! git diff --staged --quiet; then
            echo "Committing version changes..."
            # Use [skip ci] in commit message to prevent workflow loops
            git commit -m "chore: update versions and changelogs for release [skip ci]"

            echo "Pushing commit to main..."
            # Push commit directly to main branch
            git push origin main

            echo "Pushing tags..."
            # Push tags created by 'changeset version'
            # Use --force if tags might already exist from failed runs (use with caution)
            git push origin --tags
          else
            echo "No versioning changes detected to commit."
          fi

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.10

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # This action handles:
      # - Running 'changeset version'
      # - Creating/updating CHANGELOG.md files
      # - Committing changes (package.json versions, changelogs)
      # - Creating Git tags for new versions
      # - Running 'changeset publish'
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: bun run release
          # If you want the action to commit the version changes
          commit: "chore: update versions and changelogs for release"
          title: "Upcoming Release Changes" # Title for the PR if versioning only
        env:
          # Required for publishing packages to npm
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # Provided by GitHub Actions, required for commits/tags/GitHub releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Create GitHub Releases for the tags created by changesets/action
      - name: Create GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract published package info from the action output
          published_packages=$(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | "\(.name)@\(.version)"')
          # Create a release for each tag (adjust logic if needed)
          for tag in $(git tag --points-at HEAD); do
            gh release create "$tag" --notes "Published packages:\n${published_packages}"
          done
